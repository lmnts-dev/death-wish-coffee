<!-- Upscribe -->
{% if product.metafields.sf_upscribe.enable_subscription %}

    {% comment %}
    Snippet variables that can be passed

    upscribe_exclude_vue_cdn_in_snippet = Whether or not to load the vue.js script from CDN
    (excluded if loaded globally, defaults to true)
    {% endcomment %}

    {% comment %} Used in case there are multiple Upscribe blocks loaded per page {% endcomment %}
    {% unless upscribe_component_uid %}
        {% assign upscribe_component_uid = product.id %}
    {% endunless %}

    {% if upscribe_include_vue_cdn_in_snippet != false %}
        {% assign upscribe_include_vue_cdn_in_snippet = true %}
    {% endif %}


    {% if upscribe_keep_component_in_sync != false %}
		{% assign upscribe_keep_component_in_sync = true %}
    {% endif %}

    <script>
        // console.info('upscribe_exclude_vue_cdn_in_snippet', '{{ upscribe_exclude_vue_cdn_in_snippet }}')
        // console.info('upscribe_component_uid', '{{ zp_product_block_id }}', '{{ upscribe_component_uid }}')
        // console.info('{{upscribe_price_display_regular}}', '{{upscribe_price_display_sale}}')
    </script>

    <style>
      .cu-upscribe {
        position: relative;
        width: 100%;
        margin-top: 20px;
        margin-bottom: 20px;
        padding: 0 5px;
      }
      .cu-upscribe__inner--hidden {
        display: none;
      }
      .cu-productTypeSelect__itemWrap {
        display: inline-block;
      }
      .cu-productTypeSelect__itemLabel {
        position: relative;
        margin: 0;
      }
      .cu-productTypeSelect__itemText {
        padding-left: 8px;
        font-size: 16px;
      }
      .cu-options {
        width: 100%;
        margin-bottom: 20px;
      }
      .cu-options--frequency {
        margin-top: 40px;
      }
      .cu-optionsTitle {
        display: block;
        margin-bottom: 20px;
        font-size: 13px;
        letter-spacing: 2px;
        font-weight: 700;
        text-transform: uppercase;
        text-align: left;
      }
      .cu-optionsGrid {
        display: flex;
      }
      .cu-option {
        border-radius: 10px;
        border: 2px solid;
        display: inline-flex;
        margin-right: 10px;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        position: relative;
        padding: 8px 16px;
        cursor: pointer;
        text-align: center;
      }
      .cu-option:active, .cu-option:hover, .cu-option:focus, .cu-option.is-active {
        border-color: #7fc464;
        color: #7fc464;
      }
      .cu-option.is-active .cu-option__check {
        display: block;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
      }
      .cu-option.is-active .cu-option__check svg {
        width: 13px;
        fill-color: white;
        fill: white;
        margin-left: -1px;
        margin-bottom: -1px;
      }
      .cu-option__check {
        display: none;
        position: absolute;
        transform: translateX(-50%) translateY(-50%);
        left: 50%;
        top: -2px;
        background-color: #7fc464;
        border-radius: 100px;
        color: #fff;
        width: 24px;
        height: 24px;
      }
      .cu-option__mainText {
        display: inline-block;
        font-size: 19px;
        letter-spacing: 2px;
        font-weight: 400;
        text-transform: uppercase;
        text-align: center;
      }
      .cu-option__subText {
        font-size: 16px;
        width: 100%;
        max-width: 250px;
        margin-ttop: 6px;
        letter-spacing: 0;
        font-weight: 400;
        text-align: center;
      }
      .cu-popup {
        display: inline-block;
        padding: 8px;
      }
      .cu-popup__hover {
        display: inline-block;
        position: relative;
        height: 35px;
        clear: both;
        cursor: pointer;
      }
      .cu-popup__block {
        display: none;
        position: absolute;
        text-align: left;
        right: -200px;
        left: auto;
        bottom: 160%;
        font-size: 13px;
        top: inherit;
        background-color: #222;
        width: 300px;
        border-radius: 5px;
        z-index: 50;
      }
      @media (min-width: 500px) {
        .cu-popup__block {
          left: -3px;
          right: auto;
        }
      }
      .cu-popup__block--isOpen {
        display: block;
      }
      .cu-popup__block::before {
        display: none;
        content: "";
        width: 1px;
        border: 10px solid transparent;
        border-bottom-color: black;
        position: absolute;
        top: -20px;
        left: 0;
        border-bottom-color: #212221;
        border-bottom-color: transparent;
        border-top-color: #212221;
        top: inherit;
        left: 3px;
        bottom: -20px;
      }
      @media (min-width: 500px) {
        .cu-popup__block::before {
          display: block;
        }
      }
      .cu-popup__block__content {
        line-height: 1.5;
        padding: 16px;
        font-size: 13px;
        color: #fff;
        margin-bottom: 8px;
        letter-spacing: 0;
      }
      .cu-popup__block__content a {
        color: #32a6fb;
        margin-top: 5px;
        display: inline-block;
      }
      .cu-popup__block__footer {
        padding: 0;
        margin-bottom: 25px;
        text-align: right;
        height: 28px;
      }
      .cu-popup__icon {
        vertical-align: middle;
        position: relative;
        height: 40px;
        top: 2px;
      }
      .cu-popup__popup {
        display: none;
        position: absolute;
        top: 100%;
        cursor: default;
        left: 0;
      }
      .cu-infoOpener {
        display: inline-block;
        position: relative;
        transform: translateY(3px);
        cursor: pointer;
      }
      .cu-infoOpener svg {
        width: 20px;
        height: 20px;
      }
      .cu-infoOpener:hover .cu-popup__block, .cu-infoOpener:active .cu-popup__block, .cu-infoOpener:focus .cu-popup__block {
        display: block;
      }

    </style>

    {% comment %} Vue for Upscribe logic include unless specificied not to from snippet include{% endcomment %}
    {% if upscribe_include_vue_cdn_in_snippet %}
        <script src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.10/vue.js"></script>
    {% endif %}


    <section v-if="product && componentMounted" id="upscribe-subscription-product-{{upscribe_component_uid}}" class="cu-upscribe">
        <div class="cu-upscribe__inner"
            :class="{'cu-upscribe__inner--hidden': !activeVariantIsApplicableVariant}"
        >

            <div class="cu-subscription-inputs" v-if="subscriptionSelected || isOnetimeSubscription">
                <input v-if="finalSubscriptionProperty" type="hidden" :value="finalSubscriptionProperty" name="properties[Subscription]">

                <input v-if="subscriptionProductTitleDisplay" type="hidden" :value="subscriptionProductTitleDisplay" name="properties[Subscription Product Title]">

                <input v-if="subscriptionAmount" type="hidden" :value="subscriptionAmount" name="properties[Subscription Amount]">

                <input v-if="activeDiscountAmount" type="hidden" :value="activeDiscountAmount" name="properties[Discount Amount]">

                <input v-if="chargeLimit" type="hidden" :value="chargeLimit" name="properties[Charge Limit]">

                <input v-if="recurringDiscountAmount" type="hidden" :value="recurringDiscountAmount" name="properties[Recurring Discount Amount]">

                <input v-if="recurringDiscountAfterOrder" type="hidden" :value="recurringDiscountAfterOrder" name="properties[Recurring Discount After Order]">

                <input v-if="intervalFrequency" type="hidden" :value="intervalFrequency" name="properties[Interval Frequency]">

                <input v-if="intervalUnit" type="hidden" :value="intervalUnit" name="properties[Interval Unit]">

            </div>

            <div class="cu-productTypeSelect js-upscribe-product-type"
              :data-upscribe-product-type="productPurchaseType"
            >
                <div class="cu-productTypeSelect__itemWrap">
                    <label class="cu-productTypeSelect__itemLabel" for="onetime-{{upscribe_component_uid}}">
                        <input type="radio" id="onetime-{{upscribe_component_uid}}" value="onetime" v-model="productPurchaseType">
                        <span class="cu-productTypeSelect__itemText">${ oneTimeMessage || 'One-time Order' }</span>
                    </label>
                </div>

                <div class="cu-productTypeSelect__itemLabel">
                    <label class="cu-productTypeSelect__itemWrap" for="subscription-{{upscribe_component_uid}}">
                        <input
                            type="radio"
                            id="subscription-{{upscribe_component_uid}}"
                            value="subscription"
                            v-model="productPurchaseType"
                        >
                        <span class="cu-productTypeSelect__itemText">${ subscriptionMessage || 'Subscribe & Save' } ${ activeDiscountAmount }</span>
                    </label>
                </div>
            </div>

            <div
                v-if="selectFrequencyOptions && subscriptionSelected"
                class="cu-options cu-options--frequency"
            >
                <span class="cu-optionsTitle">Frequency (${ intervalUnit }s)</span>

                <div class="cu-optionsGrid">
                    <v-option
                        v-for="(option, index) in selectFrequencyOptions"
                        :select-frequency-options="selectFrequencyOptions"
                        :key="option.frequency"
                        :index="index"
                        :option="option"
                        :selected-index="selectedFrequencyIndex"
                        class="cu-option"
                        v-on:click-option="setFrequency"
                    ></v-option>
                </div>
            </div>
        </div>
    </section>

    {% raw %}
    <script>

        // Option select component
        var VOption = {
            template: `
                <div class="cu-option__option"
                    v-if="option"
                    :class="{'is-active': isActive}"
                    @click="clickOption"
                >
                    <span class="cu-option__mainText"
                        v-if="option.mainText"
                    >{{ option.mainText }}</span>
                    <span class="cu-option__subText"
                        v-if="option.subText"
                    >{{ option.subText }}</span>
                </div>
            `,
            computed: {
                isActive() {
                    return this.selectedIndex === this.index
                }
            },
            props:{
                option: {
                    type: [Object, Boolean],
                    default: false
                },
                index: {
                    type: Number,
                    required: true
                },
                selectedIndex: {
                    type: Number,
                    required: true
                },
                selectFrequencyOptions: {
                    type: Array,
                    required: true
                },
            },
            methods: {
                // emit selected val
                clickOption() {
                  this.$emit('click-option', this.index)
                  {% endraw %}
                  {% if upscribe_keep_component_in_sync %}
                    // Upscribe Frequency Update
                    window.dispatchEvent(new CustomEvent("upscribeFrequencyIndexUpdate", {
                        detail: this.index,
                    }));
                  {% endif %}
                  {% raw %}
                }
            }
        }

        var upscribeSubscriptionProduct = new Vue ({

            {% endraw %}
            name: 'upscribe-{{upscribe_component_uid}}',

            el: '#upscribe-subscription-product-{{upscribe_component_uid}}',
            {% raw %}

            delimiters: ['${', '}'],

            components: {
                'v-option': VOption,
            },

            data: {
                moneyFormat: '${{amount}}',

                // Initialize vue component with shopify liquid data rendered in state
                {% endraw %}
                product: {{ product | json }},

                activeVariantId: {{ product.variants[0].id }},
                initialApplicableVariants: '{{ product.metafields.sf_upscribe.applicable_variants }}',


                subscriptionProductTitle: '{{ product.metafields.sf_upscribe.subscription_product_title | format_money }}',
                intervalFrequncyMetafield: '{{ product.metafields.sf_upscribe.interval_frequency }}',
                intervalUnitMetafield: '{{ product.metafields.sf_upscribe.interval_unit }}',

                defaultGlobalDiscountAmount: '{{ shop.metafields.sf_upscribe.default_discount_amount }}',

                discountAmount: '{{ product.metafields.sf_upscribe.discount_amount }}',
                initialChargeLimit: '{{ product.metafields.sf_upscribe.charge_limit }}',

                recurringDiscountAmount: '{{ product.metafields.sf_upscribe.recurring_discount_amount }}',
                recurringDiscountAfterOrder: '{{ product.metafields.sf_upscribe.recurring_discount_after_order }}',

                oneTimeMessage: '{{ shop.metafields.sf_upscribe.one_time_message }}',
                subscriptionMessage: '{{ shop.metafields.sf_upscribe.subscribe_message }}',
                learnMoreUrl: '{{ shop.metafields.sf_upscribe.learn_more_url }}',
                howItWorksTitle: '{{ shop.metafields.sf_upscribe.how_it_works_title }}',
                howItWorksText: '{{ shop.metafields.sf_upscribe.how_it_works_text }}',

                // update on variant changes, this is used for initial setting
                activeSubsriptionDisplayPrice: '{{ product.selected_or_first_available_variant.price }}',
                activeSubsriptionDisplayComparePrice: '{{ product.selected_or_first_available_variant.compare_at_price }}',
                {% raw %}

                selectedFrequencyIndex: 0,
                productPurchaseType: 'onetime',
                subscriptionPrice: null,

                subscriptionAmount: null,

                componentMounted: false
            },
           mounted() {
                this.activeVariantId = this.product.variants[0].id

                // reset
                this.selectedFrequencyIndex = 0
                this.productPurchaseType = 'onetime'
                this.subscriptionPrice = null

                // add listener for variant update, set in variant_selection.js
                // this listener could be different depeneding on if the theme uses the same base setup
                var vm = this
                window.addEventListener("upscribeVariantUpdate", function(event) {
                    vm.handleVariantUpdateEvent(event)
                }, false);

	            {% endraw %}
                {% if upscribe_keep_component_in_sync %}
                window.addEventListener("upscribeProductPurchaseTypeUpdate", function(event) {
                    vm.setProductPurchaseType(event.detail)
                }, false);

                window.addEventListener("upscribeFrequencyIndexUpdate", function(event) {
                    vm.setFrequency(event.detail)
                }, false);
                {% endif %}
	            {% raw %}

                this.componentMounted = true
            },
            watch: {
                // when onetime vs subscription is toggled
                productPurchaseType(newVal) {
	            {% endraw %}
                  {% if upscribe_keep_component_in_sync %}
                    // Upscribe Product Purchase Type Update
                    window.dispatchEvent(new CustomEvent("upscribeProductPurchaseTypeUpdate", {
                        detail: newVal,
                    }));
                  {% endif %}
                {% raw %}


                    // if one time
                    if (newVal === 'onetime') {
                        // use stored non-discount prices from previous changes
                        var originalPrice = this.activeSubsriptionDisplayPrice || false
                        var comparePrice = this.activeSubsriptionDisplayComparePrice || false

                        // put into money format
                        var formatOriginalPrice = originalPrice ? this.formatMoney(originalPrice) : false
                        var formatComparePrice = comparePrice ? this.formatMoney(comparePrice) : false

                        // replace pricing elements with new vals
                        this.setPricingDisplayEls(formatOriginalPrice,formatComparePrice)
                    }

                    // if subscription
                    else {
                        // use stored non-discount prices from previous changes
                        var originalPrice = this.activeSubsriptionDisplayPrice || false
                        var comparePrice = this.activeSubsriptionDisplayComparePrice || false

                        // calculate subscription discount and replace pricing elements with new vals
                        this.calculateVariantPrices(originalPrice, comparePrice)
                    }
                }
            },
            computed: {
                applicableVariants() {
                    if (!this.initialApplicableVariants) return false
                    return this.initialApplicableVariants.split(',')
                },
                activeVariantIsApplicableVariant() {
                    // all are applicable

                    if (!this.activeVariantId) {
                        this.productPurchaseType = 'onetime'
                        return false
                    }

                    if (!this.initialApplicableVariants) return true

                    if (this.applicableVariants.includes(this.activeVariantId.toString())) {
                        return true
                    } else {
                        this.productPurchaseType = 'onetime'
                        return false
                    }
                },

                // helper for if current state is subscription
                subscriptionSelected() {
                    return this.productPurchaseType === 'subscription'
                },
                // used for single purchase that will be able to reactivate as a subscription in the future
                isOnetimeSubscription() {
                    return this.chargeLimit === 'onetime'
                },
                // subscription title, used in cart and sent to checkout for replacement
                subscriptionProductTitleDisplay() {
                    let display = ''
                    display += this.subscriptionProductTitle ? this.subscriptionProductTitle : this.product.title
                    display += this.discountDisplay ? ' - ' + this.discountDisplay + ' off' : ''
                    return display
                },
                activeDiscountType() {
                    var discountAmount = this.discountAmount
                    var defaultGlobalDiscountAmount = this.defaultGlobalDiscountAmount
                    var activeDiscount = discountAmount ? discountAmount : defaultGlobalDiscountAmount

                    return activeDiscount.indexOf('$') > -1 ? '$' : '%'
                },
                activeDiscountAmount() {
                    var discountAmount = this.discountAmount
                    var defaultGlobalDiscountAmount = this.defaultGlobalDiscountAmount

                    return discountAmount ? discountAmount :
                        defaultGlobalDiscountAmount ? defaultGlobalDiscountAmount : 0
                },
                chargeLimit() {
                    return this.initialChargeLimit ? this.initialChargeLimit : 0
                },
                // build frequency options for select boxes
                selectFrequencyOptions() {
                    var intervalFrequency = this.intervalFrequency
                    var intervalUnit = this.intervalUnit

                    if (!intervalFrequency || ! intervalUnit) return false

                    return intervalFrequency.split(',').map(function(frequency) {
                        return {
                            value: frequency.trim(),
                            mainText: frequency.trim(),
                            subText: false
                        }
                    })
                },
                // plural unit display check
                finalSubscriptionProperty() {
                    var selectedFrequency = this.selectedFrequency
                    var unit = this.intervalUnit
                    if (!this.subscriptionSelected && !this.isOnetimeSubscription) return false

                    if (selectedFrequency > 1) {
                        return selectedFrequency + ' ' + unit + 's'
                    } else {
                        return selectedFrequency + ' ' + unit
                    }
                },
                selectedFrequency() {
                    return this.selectFrequencyOptions[this.selectedFrequencyIndex].value
                },
                intervalUnit() {
                    return this.intervalUnitMetafield ? this.intervalUnitMetafield : 'day'
                },
                intervalFrequency() {
                    return this.intervalFrequncyMetafield ? this.intervalFrequncyMetafield : '15,30,45,60'
                },
            },
            methods: {
                getParameterByName(name, url = window.location.href) {
                    name = name.replace(/[\[\]]/g, '\\$&');
                    var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
                        results = regex.exec(url);
                    if (!results) return null;
                    if (!results[2]) return '';
                    return decodeURIComponent(results[2].replace(/\+/g, ' '));
                },
                setFrequency(val) {
                    this.selectedFrequencyIndex = val
                },
                setProductPurchaseType(val) {
                    if (!val) return
                    this.productPurchaseType = val
                },
                discountCalculatedValue(total) {
                    var discountType = this.activeDiscountType
                    var discountAmount = this.activeDiscountAmount.replace('%','').replace('$', '');

                    var calcDiscountAmount = 0

                    if (discountType === '$') { // fixed
                        calcDiscountAmount = discountAmount
                    } else if (discountType === '%') { //percentage
                        calcDiscountAmount = (total * discountAmount) / 100
                    }
                    return total - calcDiscountAmount
                },
                // replace pricing values, for compare and regular pricing
                setPricingDisplayEls(original, compare) {
                    {% endraw %}
                        {% if upscribe_regular_price_query_selector %}
                            var regularEl = document.querySelector('{{upscribe_regular_price_query_selector}}');
                        {% else %}
                            var regularEl = document.querySelector('.upscribe-price-item-regular');
                        {% endif %}

                        {% if upscribe_sale_price_query_selector %}
                            var saleEl = document.querySelector('{{upscribe_sale_price_query_selector}}');
                        {% else %}
                            var saleEl = document.querySelector('.upscribe-price-item-sale');
                            var strikethroughPrice = document.querySelector('.strikethrough-price')
                        {% endif %}
                    {% raw %}

                    if (!regularEl && !saleEl) {
                        return
                    }

                    if (compare) {
                        if (regularEl) regularEl.innerHTML = compare;
                        if (saleEl) {
                            saleEl.innerHTML = original;
                            strikethroughPrice.innerHTML = original;
                        }
                    }

                    else {
                        if (regularEl) regularEl.innerHTML = original;
                        if (saleEl) {
                            saleEl.innerHTML = '';
                            strikethroughPrice.innerHTML = '';
                        }
                    }
                },
                // on event triggered from variant change in select boxes
                handleVariantUpdateEvent(event) {
                    var variant = event.detail
                    var originalPrice = variant.price || false
                    var originalComparePrice = variant.compare_at_price || false

                    console.log({variant})

                    this.activeVariantId = variant.id

                    // calculate and set new values
                    this.calculateVariantPrices(originalPrice, originalComparePrice)

                    // update original price if available
                    this.calculateOriginalVariantPrices(variant)

                    // store values if subscription isn't currently selected
                    this.activeSubsriptionDisplayPrice = originalPrice
                    this.activeSubsriptionDisplayComparePrice = originalPrice
                    //this.activeSubsriptionDisplayComparePrice = originalComparePrice
                    //this.activeSubsriptionDisplayComparePrice = originalComparePrice
                },
                getFinalCurrencyRate(amount) {
                    return parseInt(amount)
                },
                calculateOriginalVariantPrices(variant) {
                    var price = variant.price
                    var originalNoDiscountPriceEl = document.querySelector(".upscribe-price-item-original");

                    if (originalNoDiscountPriceEl) {
                        originalNoDiscountPriceEl.innerHTML = price
                    }
                },
                calculateVariantPrices(originalPrice, originalComparePrice) {
                    var displayDiscountPrice = false
                    var displayDiscountComparePrice = false

                    if (originalPrice) {
                        var originalPriceEl = document.querySelector(".upscribe-price-item-regular");
                        var discountPrice = originalPrice - this.discountCalculatedValue(originalPrice)

                        // set for passing in cart property to checkout - not formatted
                        this.subscriptionAmount = this.getFinalCurrencyRate(originalPrice - discountPrice)

                        displayDiscountPrice = this.formatMoney(originalPrice - discountPrice)
                    }

                    if (originalComparePrice) {
                        var discountComparePrice = originalComparePrice - this.discountCalculatedValue(originalComparePrice)

                        displayDiscountComparePrice = this.formatMoney(originalComparePrice - discountComparePrice)
                    }

                    // replace price elements if subscription selected
                    if (this.subscriptionSelected) {
                        this.setPricingDisplayEls(displayDiscountPrice, displayDiscountComparePrice)
                    }

                    // if onetime selected, store to use if selected next
                    else{
                        this.activeSubsriptionDisplayPrice = displayDiscountPrice
                        this.activeSubsriptionDisplayComparePrice = displayDiscountComparePrice
                    }
                },
                // shopify format money
                formatMoney(cents, format) {
                    if (typeof cents === 'string') {
                    cents = cents.replace('.', '');
                    }
                    var value = '';
                    var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
                    var formatString = format || this.moneyFormat;

                    function formatWithDelimiters(number, precision, thousands, decimal) {
                    thousands = thousands || ',';
                    decimal = decimal || '.';

                    if (isNaN(number) || number === null) {
                        return 0;
                    }

                    number = (number / 100.0).toFixed(precision);

                    var parts = number.split('.');
                    var dollarsAmount = parts[0].replace(
                        /(\d)(?=(\d\d\d)+(?!\d))/g,
                        '$1' + thousands
                    );
                    var centsAmount = parts[1] ? decimal + parts[1] : '';

                    return dollarsAmount + centsAmount;
                    }

                    switch (formatString.match(placeholderRegex)[1]) {
                    case 'amount':
                        value = formatWithDelimiters(cents, 2);
                        break;
                    case 'amount_no_decimals':
                        value = formatWithDelimiters(cents, 0);
                        break;
                    case 'amount_with_comma_separator':
                        value = formatWithDelimiters(cents, 2, '.', ',');
                        break;
                    case 'amount_no_decimals_with_comma_separator':
                        value = formatWithDelimiters(cents, 0, '.', ',');
                        break;
                    case 'amount_no_decimals_with_space_separator':
                        value = formatWithDelimiters(cents, 0, ' ');
                        break;
                    case 'amount_with_apostrophe_separator':
                        value = formatWithDelimiters(cents, 2, "'");
                        break;
                    }

                    return formatString.replace(placeholderRegex, value);
                }
            },
            // remove listener
            destroyed() {
                window.removeEventListener('upscribeVariantUpdate', this.handleVariantUpdateEvent);
                window.removeEventListener('upscribeProductPurchaseTypeUpdate', this.setProductPurchaseType);
                window.removeEventListener('upscribeFrequencyIndexUpdate', this.setFrequency);
            }
        })


        // If page is loaded from cache (browser back/forward button), force page reload
      	window.addEventListener('pageshow', function (event) { if (event.persisted || window.performance &&
    		window.performance.navigation.type == 2) { window.location.reload(); } }, false);

    </script>


    {% endraw %}

    {% comment %} Reset snippet variables{% endcomment %}
    {% assign upscribe_include_vue_cdn_in_snippet = true %}
    {% assign upscribe_component_uid = false %}
    {% assign upscribe_keep_component_in_sync = false %}
    {% assign upscribe_regular_price_query_selector = false %}
    {% assign upscribe_sale_price_query_selector = false %}
{% endif %}
