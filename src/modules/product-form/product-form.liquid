{%- assign is_vue_component = is_vue_component | default: false -%}
{%- assign custom_attrs = custom_attrs | default: '' -%}
{%- assign form_type = form_type | default: 'button' -%}
{%- assign palette = palette | default: false -%}
{%- assign button_class = button_class | default: false -%}
{%- capture button_class -%}product-form__button js-form-submit{% if button_class %} {{ button_class }}{% endif %}{% if palette %} button--palette-{{ palette }}{% endif %}{%- endcapture -%}
{%- assign product = product | default: false -%}
{%- assign show_title = show_title | default: false -%}
{%- assign class = class | default: false -%}
{%- capture class -%}product-form product-form--type-{{ form_type }}{% if class %} {{ class }}{% endif %}{% if palette %} product-form--palette-{{ palette }}{% endif %}{%- endcapture -%}

<!-- Upscribe -->
  {% comment %}
  Snippet variables that can be passed
  upscribe_exclude_vue_cdn_in_snippet = Whether or not to load the vue.js script from CDN
  (excluded if loaded globally, defaults to true)
  {% endcomment %}
{% comment %} Reset snippet variables{% endcomment %}
{% assign upscribe_include_vue_cdn_in_snippet = true %}
  {% comment %} Used in case there are multiple Upscribe blocks loaded per page {% endcomment %}
{%- comment -%}
  {% assign upscribe_component_uid = false %}
{%- endcomment -%}
{% assign upscribe_component_uid = product.id %}
{% assign upscribe_keep_component_in_sync = false %}
{% assign upscribe_regular_price_query_selector = false %}
{% assign upscribe_sale_price_query_selector = false %}
{%- comment -%}
{% unless upscribe_component_uid %}
  {% assign upscribe_component_uid = product.id %}
{% endunless %}
{%- endcomment -%}
{% if upscribe_include_vue_cdn_in_snippet != false %}
  {% assign upscribe_include_vue_cdn_in_snippet = true %}
{% endif %}
{% if upscribe_keep_component_in_sync != false %}
  {% assign upscribe_keep_component_in_sync = true %}
{% endif %}

{%- capture content -%}
  <div class="product-form__form-wrapper">
    <div 
      class="product-form__options"
      :class="{'product-form__options--single': hasSingleVariant}"
    >
      <div v-for="(option, optionIndex) in product.options" :key="option" class="product-form__option">
        {%- assign acf_size_chart = product.metafields.accentuate -%}

        
        {%- if show_title -%}
          <h4 class="product-form__option-title h4">
            ${option}
            {%- if product.metafields.accentuate.size_chart_image -%}
              <template v-if="option === 'Size'">
                <span class="product-form__size-chart-button" @click="toggleSizeChart()">(SIZING CHART)</span>
              </template>
            {%- endif -%}
            {%- if acf_size_chart.size_chart_image -%}
              <template v-if="option === 'Size'">
                {%- assign src = acf_size_chart.size_chart_image | map: 'src' -%}
                {%- assign src_mobile = acf_size_chart.size_chart_image_mobile | map: 'src' -%}
                
                <div class="product-form__size-chart" v-cloak v-show="sizeChartActive">
                  {%- render 'image', src: src, class: 'product-form__size-chart-image-desktop image--contain image--relative' -%}
                  {%- assign src_mobile = src_mobile | default: src -%}
                  {%- render 'image', src: src_mobile, class: 'product-form__size-chart-image-mobile image--contain image--relative' -%}
                  <div class="product-form__size-chart-close" @click="toggleSizeChart()" >
                    {%- render 'svg', type: 'close', class: 'product-form__size-chart-icon-close' -%}
                  </div>
                </div>
              </template>
            {%- endif -%}
          </h4>
        {%- endif -%}
        {%- if form_type == 'button' -%}
          <div class="product-form__option-values">
            <div v-for="value in product.options_by_name[option].option.values" :key="option + ':' + value"
                class="product-form__option-value"
            >
              <input :id="optionInputId(option, value)"
                    :name="option + value"
                    :value="value"
                    v-model="selectedOptions[option]"
                    class="radio product-form__option-value-input js-product-input"
                    type="radio"
                    @click="toggleOption(option, value)"
              >
              <label :for="optionInputId(option, value)"
                    class="label label--radio product-form__option-value-label"
              >
                <div class="option-icon" v-if="optionIcons[value]" v-html="optionIcons[value]"></div>
                <!-- {% render 'variant-icons', type: svg_unselected, class: 'product-form__option-value-icon' %} -->
                <div class="product-form__option-value-text">
                  <div class="product-form__option-value-name">
                    ${value}
                  </div>
                  <div v-if="option === priceDecidingFactor"
                      class="product-form__option-price b1"
                  >
                    $${getPriceForOptionValue(optionIndex, value)}
                  </div>
                </div>
              </label>
            </div>
          </div>
        {%- else -%}
          <div class="product-form__select">
            <select name="variant" class="product-form__select-dropdown" @change="handleVariantSelecting">
              <option value selected>Select Field</option>
              <template v-for="variant in product.variants">
                <option :key="variant.id" :disabled="!variant.available" :value="variant.id" data-title="variant.title" data-variant="variant">${variant.title}<span v-if="!variant.available">(Sold Out)</span></option>
              </template>
            </select>
          </div>
        {%- endif -%}
      </div>
    </div>
    {%- unless is_vue_component -%}
      <div v-if="!addedToCartSuccessfully && addedToCartErrorMessage" class="b1 product-form__message">${addedToCartErrorMessage}</div>
    {%- endunless -%}

    {%- comment -%}
    TODO:
    Need to re-add @submit.prevent="handleAddToCart" to form tag once we can properly pass line item props through to cart.js
    {%- endcomment -%}
    <form method="post" action="/cart/add" class="product-form__form" @submit.prevent="handleAddToCart">

      <template v-if="isEnableUpscribe">
      
        {%- comment -%}
        {%- render 'upscribe-product-options' upscribe_component_uid: upscribe_component_uid-%}
        {%- endcomment -%}
        {% assign upscribe_component_uid = upscribe_component_uid | default: blank %}

        <section class="cu-upscribe" data-module="upscribe-product-options">
          <div class="cu-upscribe__inner" id="upscribe-subscription-product-{{upscribe_component_uid}}"
            v-if="product && componentMounted" :class="{'cu-upscribe__inner--hidden': !activeVariantIsApplicableVariant}"
          >
            <div class="cu-subscription-inputs" v-if="subscriptionSelected || isOnetimeSubscription">
              
              <input v-if="finalSubscriptionProperty" type="hidden" :value="finalSubscriptionProperty"
                name="properties[Subscription]">

              <input v-if="subscriptionProductTitleDisplay" type="hidden" :value="subscriptionProductTitleDisplay"
                name="properties[Subscription Product Title]">

              <input v-if="subscriptionAmount" type="hidden" :value="subscriptionAmount" name="properties[Subscription Amount]">

              <input v-if="activeDiscountAmount" type="hidden" :value="activeDiscountAmount" name="properties[Discount Amount]">

              <input v-if="chargeLimit" type="hidden" :value="chargeLimit" name="properties[Charge Limit]">

              <input v-if="recurringDiscountAmount" type="hidden" :value="recurringDiscountAmount"
                name="properties[Recurring Discount Amount]">

              <input v-if="recurringDiscountAfterOrder" type="hidden" :value="recurringDiscountAfterOrder"
                name="properties[Recurring Discount After Order]">

              <input v-if="intervalFrequency" type="hidden" :value="intervalFrequency" name="properties[Interval Frequency]">

              <input v-if="intervalUnit" type="hidden" :value="intervalUnit" name="properties[Interval Unit]">

            </div>

            <div class="cu-productTypeSelect js-upscribe-product-type" :data-upscribe-product-type="productPurchaseType">
              <div class="cu-productTypeSelect__itemWrap">
                <label class="cu-productTypeSelect__itemLabel" for="onetime-{{upscribe_component_uid}}">
                  <input type="radio" id="onetime-{{upscribe_component_uid}}" value="onetime" v-model="productPurchaseType">
                  <span class="cu-productTypeSelect__itemText">${ oneTimeMessage || 'One-time Order' }
                  </span>
                </label>
              </div>

              <div class="cu-productTypeSelect__itemLabel">
                <label class="cu-productTypeSelect__itemWrap" for="subscription-{{upscribe_component_uid}}">
                  <input type="radio" id="subscription-{{upscribe_component_uid}}" value="subscription"
                    v-model="productPurchaseType">
                  <span class="cu-productTypeSelect__itemText">${ subscriptionMessage || 'Subscribe & Save' } ${
                    activeDiscountAmount }</span>
                </label>
              </div>
            </div>

            <div v-if="selectFrequencyOptions && subscriptionSelected" class="cu-options cu-options--frequency">
              <span class="cu-optionsTitle">Frequency (${ intervalUnit }s)</span>

              <div class="cu-optionsGrid">
                <div v-for="(option, index) in selectFrequencyOptions" 
                    :key="option.frequency" 
                    :class="{'is-active': selectedFrequencyIndex === index}" 
                    @click="clickOption(index, option)"
                    class="cu-option" 
                    >
                  <div class="cu-option__option" 
                    v-if="option" 
                    
                    >
                    <span class="cu-option__mainText" v-if="option.mainText">${ option.mainText }</span>
                    <span class="cu-option__subText" v-if="option.subText">${ option.subText }</span>
                  </div>
                </div>
              </div>

            </div>
          </div>
        </section>

      </template>

      <input type="hidden" name="id" :value="selectedVariantId">
      <input type="hidden" name="quantity" value="1">
      {%- render 'button',
        button_value: 'Add To Cart',
        tag: 'button',
        custom_attrs: 'type="submit" :disabled="!selectedVariantId"',
        class: button_class
      -%}
    </form>
  </div>
{%- endcapture -%}

{%- if is_vue_component -%}
  <div is="product-form" inline-template {{ custom_attrs }}>
    <div v-if="product" class="{{- class -}}">
      {{ content }}
    </div>
  </div>
{%- elsif product -%}
  {%- capture product_json -%}
    {%- render 'product-json', product: product -%}
  {%- endcapture -%}
  <div class="{{- class -}}" data-module="product-form" {{ custom_attrs }}>
    <div is="product-form"
         :product="{{- product_json | escape -}}"
         :shop='{{shop.metafields.sf_upscribe | json}}' 
         :upscribe-sale-price-query-selector="{{upscribe_sale_price_query_selector}}"
         :upscribe-regular-price-query-selector="{{upscribe_regular_price_query_selector}}"
         :upscribe-keep-component-in-sync="{{upscribe_keep_component_in_sync}}"
         inline-template
    >
      {{ content }}
    </div>
  </div>

{%- endif -%}
